varying vec2 tex;

uniform highp sampler2D frontTexture;
uniform highp sampler2D backTexture;
uniform highp sampler3D volumeTexture;

void main() {

    vec3 startPos = texture(frontTexture, tex).rgb;
    vec3 currentPos = startPos;
    vec3 endPos = texture(backTexture, tex).rgb;
    vec3 rayDirection = endPos - startPos;
    vec3 r = normalize(rayDirection);

    
    float currentDensity;
    float outputDensity;


    // corners if difference gets to small
    float raysSquared = dot(rayDirection, rayDirection);
    if (raysSquared < 0.000001) {
        return;
    }

    int steps = 1024;
    float stepSize = (length(rayDirection)) / float(steps);
    // loop for each ray step
    for (int i = 0; i < steps; i++){
        currentDensity = texture(volumeTexture, currentPos.xyz).r;

        //mip
        if (currentDensity > outputDensity) {
            outputDensity = currentDensity;
        }

        //next step
        currentPos = currentPos + (stepSize * r);
    }

    gl_FragColor = vec4(outputDensity,outputDensity,outputDensity,1.0);
}