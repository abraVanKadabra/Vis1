varying vec2 tex;

precision highp sampler2D;
uniform sampler2D frontTexture;
uniform sampler2D backTexture;

precision highp sampler3D;
uniform sampler3D volumeTexture;

void main() {
    vec3 startPosition = texture(frontTexture, tex).rgb;
    vec3 currentPosition = startPosition;
    vec3 endPosition = texture(backTexture, tex).rgb;
    vec3 rayDirection = endPosition - startPosition;
    vec3 r = normalize(rayDirection);

    float steps = 1024.0;
    float stepSize = (length(rayDirection)) / steps;

    float outputDensity = 0.0;
    float currentDensity;

    // Ecken wenn der Unterschied irrelevant ist
    float raysSquared = dot(rayDirection, rayDirection);
    if (raysSquared < 0.000001) {
        gl_FragColor = vec4 (outputDensity,outputDensity,outputDensity,1.0);
        return;
    }

    for (int i = 0; i < 1024; i++){
        vec3 inside = currentPosition - startPosition;

        //noch innerhalb des WÃ¼rfels?
        if (dot(inside, inside) > raysSquared) {
            break;
        }

        currentDensity = texture(volumeTexture, currentPosition.xyz).r;
        if (currentDensity > outputDensity) {
            outputDensity = currentDensity;
        }

        //next position
        currentPosition = currentPosition + (stepSize * r);
    }
    gl_FragColor = vec4 (outputDensity,outputDensity,outputDensity,1.0);
}