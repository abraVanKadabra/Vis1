varying vec3 vertexPos;
varying vec3 lightDir;
varying vec3 viewDir;


varying vec2 tex;

uniform highp sampler2D frontTexture;
uniform highp sampler2D backTexture;
uniform highp sampler3D volumeTexture;
uniform float iso;



uniform vec3 lightColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform float spec;



vec3 calculateGradient(vec3 pos) {

    vec3 grad;

    grad.x = texture(volumeTexture, pos + vec3(0.01, 0.0, 0.0)).r - texture(volumeTexture, pos - vec3(0.01, 0.0, 0.0)).r;
    grad.y = texture(volumeTexture, pos + vec3(0.0, 0.01, 0.0)).r - texture(volumeTexture, pos - vec3(0.0, 0.01, 0.0)).r;
    grad.z = texture(volumeTexture, pos + vec3(0.0, 0.0, 0.01)).r - texture(volumeTexture, pos - vec3(0.0, 0.0, 0.01)).r;

    return normalize(-grad);
}



void main() {

    // ----------------- First Hit ----------------------

    float isoValue = iso;

    vec3 currentPos = texture(frontTexture, tex).rgb;
    vec3 nextPos;
    float currentDensity;
    float nextDensity;

    vec3 rayDirection = texture(backTexture, tex).rgb - texture(frontTexture, tex).rgb;
    vec3 r = normalize(rayDirection);

    // corners if difference gets to small
    float raysSquared = dot(rayDirection, rayDirection);
    if (raysSquared < 0.000001) {
        return;
    }

    int steps = 1024;
    float stepSize = (length(rayDirection)) / float(steps);
    for (int i = 0; i < steps; i++){
        currentDensity = texture(volumeTexture, currentPos.xyz).r;
        nextDensity = texture(volumeTexture, (currentPos + (stepSize * r)).xyz).r;
        nextPos = currentPos + (stepSize * r);

        //first-hit-compositing & gradient
        if (currentDensity < isoValue && isoValue < nextDensity) {



            // ------------- Gradient -----------------

            vec3 N = calculateGradient(currentPos);
            vec3 L = normalize(lightDir);
            vec3 V = normalize(rayDirection);
            vec3 H = normalize(L + V);

            float diffuse = max(dot(N, L), 0.0);

            vec4 light = vec4(lightColor, 1.0) * diffuse * vec4(diffuseColor, 1.0) + vec4(specularColor, 1.0) * spec;

            gl_FragColor = light;


            return;
        }



        // next step
        currentPos = currentPos + (stepSize * r);
    }

}